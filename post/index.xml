<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mengoreo</title>
    <link>https://mengoreo.github.io/post/</link>
    <description>Recent content in Posts on Mengoreo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Mengoreo is not an oreo</copyright>
    <lastBuildDate>Tue, 20 Aug 2019 13:45:00 +0800</lastBuildDate>
    
	<atom:link href="https://mengoreo.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SLAM</title>
      <link>https://mengoreo.github.io/post/slam/</link>
      <pubDate>Tue, 20 Aug 2019 13:45:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/slam/</guid>
      <description>&lt;p&gt;SLAM interview questions&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从零搭建「视觉里程计」 —— 单文件</title>
      <link>https://mengoreo.github.io/post/vo_single/</link>
      <pubDate>Fri, 09 Aug 2019 20:50:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vo_single/</guid>
      <description>&lt;p&gt;视觉里程计分为单目、双目和 RGB-D 三类，其中单目视觉相对复杂，而 RGB-D 最为简单，没有初始化，也没有尺度问题。本文从 RGB-D 做起，使用的数据来自 &lt;a href=&#34;https://vision.in.tum.de/data/datasets/rgbd-dataset/download&#34;&gt;TUM 数据集&lt;/a&gt; 。之所以先从单文件说起，是想先把视觉里程计的原理和流程搞明白，再去分模块搭建框架，要不然上来就分模块设计，难免会有些云里雾里。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Feature Detection</title>
      <link>https://mengoreo.github.io/post/feature_detection/</link>
      <pubDate>Tue, 06 Aug 2019 21:31:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/feature_detection/</guid>
      <description>Harris-Shi-Tomasi Feature Detector cv::GFTTDetector()     If the image is shifted a small amount (\(\Delta x\) , \(\Delta y\) ), how similar is it to its original self?
\begin{equation} c(x, y, \Delta x, \Delta y) = \displaystyle \sum_{(i, j) \in W(x, y)} w_{i, j}(I(i, j) - I(i + \Delta x, j + \Delta y))^2 \end{equation}
\begin{equation} \boldsymbol{M}=\sum_{x, y} w(x, y)\left[\begin{array}{cc}{I_{x}^{2}} &amp;amp; {I_{x} I_{y}} \\
{I_{x} I_{y}} &amp;amp; {I_{y}^{2}}\end{array}\right] \end{equation}</description>
    </item>
    
    <item>
      <title>Hash Tables</title>
      <link>https://mengoreo.github.io/post/hash_tables/</link>
      <pubDate>Tue, 06 Aug 2019 15:17:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/hash_tables/</guid>
      <description>&lt;p&gt;Hash tables have the &lt;strong&gt;best theoretical and real-world performance&lt;/strong&gt; for lookup, insert and delete. Each of these operations has \(O(1)\) time complexity. The \(O(1)\) time complexity for insertion is for the average case &amp;ndash; a single insert can take \(O(n)\) if the hash table to has to be resized.&lt;/p&gt;

&lt;p&gt;Consider using a hash code as a &lt;strong&gt;signature&lt;/strong&gt; to enhance performance, e.g. to filter out candidates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Searching</title>
      <link>https://mengoreo.github.io/post/searching/</link>
      <pubDate>Tue, 06 Aug 2019 14:15:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/searching/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Binary search&lt;/strong&gt; is an effective search tool. It is applicable to more than just searching in sorted arrays, e.g., it can be used to search an &lt;strong&gt;interval of real numbers or integers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If your solution uses sorting, and the computation performed after sorting is faster than sorting e.g., \(O(n)\) or \(O(\log n)\) , &lt;strong&gt;look for solutions that do not perform a complete sort&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider &lt;strong&gt;time/space trade-offs&lt;/strong&gt;, such as making multiple passes through the data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Heaps</title>
      <link>https://mengoreo.github.io/post/heaps/</link>
      <pubDate>Tue, 06 Aug 2019 13:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/heaps/</guid>
      <description>&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Heap functionality is provided by the &lt;code&gt;heapq&lt;/code&gt; module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heapq.heapify(L)&lt;/code&gt;, which transforms the elements in &lt;code&gt;L&lt;/code&gt; into a heap &lt;strong&gt;in place&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.nsmallest(k, l)&lt;/code&gt; return the \(k\) smallest elements in &lt;code&gt;L&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappush(h, e)&lt;/code&gt; pushes a new element on the heap.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappop(h)&lt;/code&gt; pops the smallest value from the heap.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappushpop(h, e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e = h[0]&lt;/code&gt; returns the smallest value without popping it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s very important to note that &lt;strong&gt;&lt;code&gt;heapq&lt;/code&gt; only provides min-heap functionality&lt;/strong&gt;. If you need build a max-heap on integers or floats, insert their negative value to get the effect. For objects, implement &lt;code&gt;__lt()__&lt;/code&gt; appropriately.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Binary Trees</title>
      <link>https://mengoreo.github.io/post/binary_trees/</link>
      <pubDate>Tue, 06 Aug 2019 10:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/binary_trees/</guid>
      <description>&lt;h2 id=&#34;test-if-a-binary-tree-is-heigh-balanced&#34;&gt;Test If A Binary Tree Is Heigh-Balanced&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_balanced_binary_tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namedtuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;BalancedStatusWithHeight&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;balanced&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# First value indicates if tree is balanced&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# and if balanced, second value is the height of tree&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Base case&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Current &amp;#34;root&amp;#34; height&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Stacks and Queues</title>
      <link>https://mengoreo.github.io/post/stacks_and_queues/</link>
      <pubDate>Tue, 06 Aug 2019 08:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/stacks_and_queues/</guid>
      <description>&lt;h2 id=&#34;implement-a-stack-with-max-api&#34;&gt;Implement A Stack with Max API&lt;/h2&gt;

&lt;p&gt;If we use a single auxiliary variable, \(M\) to record the element that is maximum in the stack, updating \(M\) on pushes is easy, but not on pops. For this reason, we cache the maximum stored at or below that entry. When we pop, we simply evict the corresponding cached value.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linked Lists</title>
      <link>https://mengoreo.github.io/post/linked_lists/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/linked_lists/</guid>
      <description>&lt;p&gt;Inserting and deleting elements in a list has time complexity \(O(1)\) , while obtaining $k$-th element in a list has time complexity \(O(n)\) .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A &lt;code&gt;list&lt;/code&gt; object is an array not a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two types list related problems:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://mengoreo.github.io/post/strings/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/strings/</guid>
      <description>&lt;p&gt;You should know &lt;strong&gt;how strings are represented in memory&lt;/strong&gt; and understand basic operations on strings such as comparison, copying, joining, splitting, matching, etc. Advanced string processing algorithm often use &lt;strong&gt;hash tables&lt;/strong&gt; and &lt;strong&gt;dynamic programming&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://mengoreo.github.io/post/arrays/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/arrays/</guid>
      <description>&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Arrays are provided in Python by &lt;code&gt;list&lt;/code&gt; type. ( &lt;code&gt;tuple&lt;/code&gt; is similar to &lt;code&gt;list&lt;/code&gt;, but immutable.);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking if a value in an array has \(O(n)\) time complexity.&lt;/li&gt;
&lt;li&gt;To understand how copy works check &lt;a href=&#34;https://mengoreo.github.io/post/python_questions/#shallow-and-deep-copy&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Python Questions</title>
      <link>https://mengoreo.github.io/post/python_questions/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/python_questions/</guid>
      <description>&lt;h2 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h2&gt;

&lt;p&gt;Garbage collection is the process of &lt;strong&gt;finding data objects&lt;/strong&gt; in a running programe that cannot be accessed in the future, and &lt;strong&gt;to reclaim resources&lt;/strong&gt;, particularly memory, used by those objects.
Most garbage-collected language uses either &lt;strong&gt;reference counting&lt;/strong&gt; or &lt;strong&gt;tracing&lt;/strong&gt; .&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第七章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch7/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch7/</guid>
      <description>&lt;p&gt;个人拙见，如有错误，欢迎评论指出 🤗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第五章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch5/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch5/</guid>
      <description>&lt;p&gt;本篇主要总结关于相机标定的问题，特别是相机的内参如何求。总结的还不全面，有待补充。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第六章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch6/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch6/</guid>
      <description>&lt;p&gt;个人拙见，如有错误，欢迎评论指出 🤗。查找资料整理的时候，懒得翻译了。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第三章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch3/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch3/</guid>
      <description>&lt;p&gt;个人拙见，如有错误，欢迎评论指出 🤗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第四章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch4/</link>
      <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch4/</guid>
      <description>&lt;p&gt;个人拙见，如有错误，欢迎评论指出 🤗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>视觉 SLAM 十四讲 —— 第一章习题</title>
      <link>https://mengoreo.github.io/post/vslam_ch1/</link>
      <pubDate>Tue, 16 Jul 2019 16:47:54 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/vslam_ch1/</guid>
      <description>&lt;p&gt;个人拙见，如有错误，欢迎评论指出 🤗。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Core Functionality of OpenCV4</title>
      <link>https://mengoreo.github.io/post/learning_opencv/</link>
      <pubDate>Thu, 30 May 2019 15:13:35 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/learning_opencv/</guid>
      <description>Mat - The Basic Image Container Mat is basically a class with two data parts: the matrix header (containing information such as the size of the matrix, the method used for storing, at which address is the matrix stored …) and a pointer to the matrix data containing the pixe values. The matrix header size is constant, but the size of the matrix itself may vary.
OpenCV uses a reference counting system.</description>
    </item>
    
    <item>
      <title>机器学习-周志华 课后习题</title>
      <link>https://mengoreo.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%91%A8%E5%BF%97%E5%8D%8E/</link>
      <pubDate>Sat, 04 May 2019 14:37:36 +0800</pubDate>
      
      <guid>https://mengoreo.github.io/post/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%91%A8%E5%BF%97%E5%8D%8E/</guid>
      <description>写在前面，因为没有标准答案，机友如果有不同见解欢迎评论交流，我会及时回复。 绪论 1.1 更改后的数据集为： 编号 色泽 根蒂 敲声 好瓜 1 青绿 蜷缩 浊响 是 4 乌黑</description>
    </item>
    
  </channel>
</rss>
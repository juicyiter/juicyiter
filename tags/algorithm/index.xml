<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm on Mengoreo</title>
    <link>https://blog.mengoreo.cn/tags/algorithm/</link>
    <description>Recent content in Algorithm on Mengoreo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Mengoreo is not an oreo</copyright>
    <lastBuildDate>Tue, 06 Aug 2019 15:17:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.mengoreo.cn/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hash Tables</title>
      <link>https://blog.mengoreo.cn/post/hash_tables/</link>
      <pubDate>Tue, 06 Aug 2019 15:17:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/hash_tables/</guid>
      <description>&lt;p&gt;Hash tables have the &lt;strong&gt;best theoretical and real-world performance&lt;/strong&gt; for lookup, insert and delete. Each of these operations has \(O(1)\) time complexity. The \(O(1)\) time complexity for insertion is for the average case &amp;ndash; a single insert can take \(O(n)\) if the hash table to has to be resized.&lt;/p&gt;

&lt;p&gt;Consider using a hash code as a &lt;strong&gt;signature&lt;/strong&gt; to enhance performance, e.g. to filter out candidates.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Searching</title>
      <link>https://blog.mengoreo.cn/post/searching/</link>
      <pubDate>Tue, 06 Aug 2019 14:15:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/searching/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Binary search&lt;/strong&gt; is an effective search tool. It is applicable to more than just searching in sorted arrays, e.g., it can be used to search an &lt;strong&gt;interval of real numbers or integers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If your solution uses sorting, and the computation performed after sorting is faster than sorting e.g., \(O(n)\) or \(O(\log n)\) , &lt;strong&gt;look for solutions that do not perform a complete sort&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Consider &lt;strong&gt;time/space trade-offs&lt;/strong&gt;, such as making multiple passes through the data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Heaps</title>
      <link>https://blog.mengoreo.cn/post/heaps/</link>
      <pubDate>Tue, 06 Aug 2019 13:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/heaps/</guid>
      <description>&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Heap functionality is provided by the &lt;code&gt;heapq&lt;/code&gt; module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heapq.heapify(L)&lt;/code&gt;, which transforms the elements in &lt;code&gt;L&lt;/code&gt; into a heap &lt;strong&gt;in place&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.nsmallest(k, l)&lt;/code&gt; return the \(k\) smallest elements in &lt;code&gt;L&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappush(h, e)&lt;/code&gt; pushes a new element on the heap.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappop(h)&lt;/code&gt; pops the smallest value from the heap.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappushpop(h, e)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e = h[0]&lt;/code&gt; returns the smallest value without popping it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s very important to note that &lt;strong&gt;&lt;code&gt;heapq&lt;/code&gt; only provides min-heap functionality&lt;/strong&gt;. If you need build a max-heap on integers or floats, insert their negative value to get the effect. For objects, implement &lt;code&gt;__lt()__&lt;/code&gt; appropriately.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Binary Trees</title>
      <link>https://blog.mengoreo.cn/post/binary_trees/</link>
      <pubDate>Tue, 06 Aug 2019 10:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/binary_trees/</guid>
      <description>&lt;h2 id=&#34;test-if-a-binary-tree-is-heigh-balanced&#34;&gt;Test If A Binary Tree Is Heigh-Balanced&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;is_balanced_binary_tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;namedtuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;BalancedStatusWithHeight&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;balanced&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# First value indicates if tree is balanced&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# and if balanced, second value is the height of tree&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Base case&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Current &amp;#34;root&amp;#34; height&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;abs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;left_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;right_result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BalancedStatusWithHeight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check_balanced&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tree&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanced&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Stacks and Queues</title>
      <link>https://blog.mengoreo.cn/post/stacks_and_queues/</link>
      <pubDate>Tue, 06 Aug 2019 08:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/stacks_and_queues/</guid>
      <description>&lt;h2 id=&#34;implement-a-stack-with-max-api&#34;&gt;Implement A Stack with Max API&lt;/h2&gt;

&lt;p&gt;If we use a single auxiliary variable, \(M\) to record the element that is maximum in the stack, updating \(M\) on pushes is easy, but not on pops. For this reason, we cache the maximum stored at or below that entry. When we pop, we simply evict the corresponding cached value.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linked Lists</title>
      <link>https://blog.mengoreo.cn/post/linked_lists/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/linked_lists/</guid>
      <description>&lt;p&gt;Inserting and deleting elements in a list has time complexity \(O(1)\) , while obtaining $k$-th element in a list has time complexity \(O(n)\) .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A &lt;code&gt;list&lt;/code&gt; object is an array not a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two types list related problems:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>https://blog.mengoreo.cn/post/strings/</link>
      <pubDate>Mon, 05 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/strings/</guid>
      <description>&lt;p&gt;You should know &lt;strong&gt;how strings are represented in memory&lt;/strong&gt; and understand basic operations on strings such as comparison, copying, joining, splitting, matching, etc. Advanced string processing algorithm often use &lt;strong&gt;hash tables&lt;/strong&gt; and &lt;strong&gt;dynamic programming&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>https://blog.mengoreo.cn/post/arrays/</link>
      <pubDate>Sun, 04 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/arrays/</guid>
      <description>&lt;h2 id=&#34;libraries&#34;&gt;Libraries&lt;/h2&gt;

&lt;p&gt;Arrays are provided in Python by &lt;code&gt;list&lt;/code&gt; type. ( &lt;code&gt;tuple&lt;/code&gt; is similar to &lt;code&gt;list&lt;/code&gt;, but immutable.);&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checking if a value in an array has \(O(n)\) time complexity.&lt;/li&gt;
&lt;li&gt;To understand how copy works check &lt;a href=&#34;https://blog.mengoreo.cn/post/python_questions/#shallow-and-deep-copy&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Primitive Types</title>
      <link>https://blog.mengoreo.cn/post/primitive-types/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0800</pubDate>
      
      <guid>https://blog.mengoreo.cn/post/primitive-types/</guid>
      <description>Be very comfortable with bitwise operators, particularly XOR.
Understand how to use masks and create them in an machine independent way
Know how fast ways to clear the lowermost set bit (and by extension, set the lowermost 0, get its index, etc.)
Understand signedness and its implications to shifting
Consider using a cache to accelerate operations by using it to brute-force small inputs
Be aware that commutativity and associativity can be used to perform operations in parallel and reorder operations.</description>
    </item>
    
  </channel>
</rss>